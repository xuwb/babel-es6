{"version":3,"sources":["webpack:///webpack/bootstrap 2b07b879443a881bae82","webpack:///./src/js/c.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA,uDAAsD,EAAE","file":"c.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2b07b879443a881bae82\n **/","module.exports = 'A和B都引用C，同时A引用B。\\\r\n打包时，A文件只会添加一次C文件内容，后面调用B时，只是调用对C输出内容的引用。\\\r\n但是在两个html页面分别调用A和B时，C的内容相当于在每个页面都加载了一遍，增加了下载的资源。 \\n \\\r\n解决办法：1、将通用资源放到到页面 <script> 中，通过config文件中的 externals: { } 加载 \\n'\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/c.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}